# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


class Solution(object):
    def reverseBetween(self, head, left, right):
        """
        :type head: ListNode
        :type left: int
        :type right: int
        :rtype: ListNode
        """
        dummy = ListNode()
        dummy.next = head
        pre = dummy
        for i in range(1, left):
            pre = pre.next
        middle_head = pre
        for i in range(left, right):
            p = pre.next
            q = p.next
            q.next = p
            pre = p
        middle_head.next.next = pre.next.next
        middle_head.next = p
        return dummy.next


# @lc code=end

if __name__ == "__main__":
    s = Solution()
    l = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))
    s.reverseBetween(l, 2, 4)


# total_testcases:44
# total_correct:0
# input_formatted:"[1,2,3,4,5],2,4"
# expected_output:[1,4,3,2,5]
# code_output:Error - Found cycle in the ListNode
